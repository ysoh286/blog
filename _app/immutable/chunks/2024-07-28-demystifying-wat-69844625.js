import{S as Ul,i as Zl,s as Gl,e as r,t as i,a as f,c as s,b as n,d as u,f as t,g as c,k as p,h as o,j as a,n as xa}from"./index-794e8e40.js";function Ql(_l){let h,mt,P,Et,bt,ke,G,_t,De,Q,yt,Le,y,jt,re,gt,Tt,He,C,yl=`<code class="language-undefined">[] + []  // returns &quot;&quot;
</code>`,Se,V,Ot,xe,k,jl=`<code class="language-undefined">[] + []
// = &quot;&quot; + &quot;&quot;
// = &quot;&quot;</code>`,Ae,D,qt,ie,Pt,Me,j,Ct,se,kt,Dt,Re,L,gl='<code class="language-undefined">String(&#123;&#125;); // returns [object Object]</code>',Ie,X,Lt,Je,H,Tl=`<code class="language-undefined">[] + &#123;&#125;
// = &#39;&#39; + &#39;[object Object]&#39; // converted to string
// = &#39;[object Object]&#39;</code>`,Fe,g,Ht,ne,St,xt,We,S,Ol='<code class="language-undefined">&#123;&#125; + [] // 0</code>',Be,w,At,ue,Mt,Rt,fe,It,Jt,Ke,x,ql=`<code class="language-undefined">&#123;&#125; + []
// = + []
// = ToNumber(ToPrimitive([]))
// = ToNumber(&quot;&quot;)
// = 0</code>`,ze,Y,ce,Ft,Ue,d,Wt,pe,Bt,Kt,de,zt,Ut,Ne,Zt,Gt,ve,Qt,Vt,Ze,A,Pl=`<code class="language-undefined">&#123;&#125; + &#123;&#125;
// = + &#123;&#125;
// = ToNumber(ToPrimitive(&#123;&#125;))
// = ToNumber(&#39;[object Object]&#39;)
// = NaN // as the string cannot be converted to number</code>`,Ge,T,Xt,he,Yt,$t,Qe,M,Cl='<code class="language-undefined">Array(16).join(&quot;wat&quot; - 1);</code>',Ve,O,ea,we,ta,aa,Xe,q,la,me,oa,ra,Ye,R,kl=`<code class="language-undefined">&quot;wat&quot; - 1
// = Number(&quot;wat&quot;) - 1
// = NaN - 1
// = NaN</code>`,$e,$,ia,et,I,Dl=`<code class="language-undefined">Array(16).join(&quot;wat&quot; - 1) + &quot; Batman!&quot;
// = Array(16).join(NaN) + &quot; Batman!&quot;
// = Array(16).join(&quot;NaN&quot;) + &quot; Batman!&quot;
// = &quot;NaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN&quot; + &quot; Batman!&quot;
// = &quot;NaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN Batman!&quot;</code>`,tt,ee,sa,at,te,na,lt,ae,ua,ot,b,Ee,fa,ca,be,pa,da,rt,J,Ll=`<code class="language-undefined">1 &lt; 2 &lt; 3
// = (1 &lt; 2) &lt; 3
// = true &lt; 3 // converted to boolean, then to number
// = 1 &lt; 3
// = true</code>`,it,v,_e,Na,va,ye,ha,wa,je,ma,Ea,st,F,Hl=`<code class="language-undefined">3 &gt; 2 &gt; 1
// = (3 &gt; 2) &gt; 1
// = true &gt; 1 // boolean gets converted to number (true = 1, false = 0)
// = 1 &gt; 1
// = false</code>`,nt,le,ba,ut,N,ge,W,_a,ya,Te,_,ja,Oe,ga,Ta,Oa,qe,B,qa,Pa,Pe,K,Ca,ka,z,Da,U,La,Ha;return{c(){h=r("p"),mt=i("For software engineers, you’ve most likely come across the popular "),P=r("a"),Et=i("wat video"),bt=i(", which highlights some interesting behaviour of JavaScript (JS part starts at 1:24 - 4:00)."),ke=f(),G=r("p"),_t=i(`I used to laugh at this and at the nonsense of it (the batman joke was gold), but wouldn’t it be good to
demystify what’s really going on and why do we have such behaviour?`),De=f(),Q=r("h3"),yt=i("Adding 2 empty arrays together:"),Le=f(),y=r("p"),jt=i("The addition operator "),re=r("code"),gt=i("+"),Tt=i(" will aim to either perform string concatentation OR numeric addition."),He=f(),C=r("pre"),Se=f(),V=r("p"),Ot=i("The two empty arrays will try to be converted to a primitive data type, which get converted to string, which evaluates to an empty string, thus concatenating 2 empty strings, gives an empty string."),xe=f(),k=r("pre"),Ae=f(),D=r("h3"),qt=i("Adding "),ie=r("code"),Pt=i("[] + {} = [object Object]"),Me=f(),j=r("p"),Ct=i("This returns "),se=r("code"),kt=i("[object Object]"),Dt=i(". Strangely enough, we generally see this output when an object is being converted into a primitive data type into a string."),Re=f(),L=r("pre"),Ie=f(),X=r("p"),Lt=i("Thus, when adding the two together:"),Je=f(),H=r("pre"),Fe=f(),g=r("h3"),Ht=i("What about "),ne=r("code"),St=i("{} + [] = 0"),xt=i("?"),We=f(),S=r("pre"),Be=f(),w=r("p"),At=i("This one is a strange one, but JS is interpreting the front "),ue=r("code"),Mt=i("{}"),Rt=i(` as a empty block rather than an object.
With the empty block evaluated, this means it just leaves `),fe=r("code"),It=i("+ []"),Jt=i(", which gets converted to a primitive which is a string , then a number, giving us 0"),Ke=f(),x=r("pre"),ze=f(),Y=r("h3"),ce=r("code"),Ft=i("{} + {} = NaN"),Ue=f(),d=r("p"),Wt=i("The first "),pe=r("code"),Bt=i("{}"),Kt=i(" is just evaluated as an empty block, and thus ignored. Which leaves us with "),de=r("code"),zt=i("+ {}"),Ut=i(". Once again, the object gets converted to a primitive, which is a string, giving us "),Ne=r("code"),Zt=i("+ '[object Object]'"),Gt=i(". Next, when we try to convert this to a number, it will return "),ve=r("code"),Qt=i("NaN"),Vt=i("."),Ze=f(),A=r("pre"),Ge=f(),T=r("h3"),Xt=i("The Batman "),he=r("code"),Yt=i("NaN"),$t=i(" explanation"),Qe=f(),M=r("pre"),Ve=f(),O=r("p"),ea=i("returns a string of "),we=r("code"),ta=i("NaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN"),aa=i("."),Xe=f(),q=r("p"),la=i("Let’s dissect the "),me=r("code"),oa=i('"wat" - 1'),ra=i(" part:"),Ye=f(),R=r("pre"),$e=f(),$=r("p"),ia=i(`This will evaluate to NaN as trying to convert “wat” into a number will return NaN. Thus, adding numbers to NaN will still result in NaN.
The join operator will try convert this to a string, thus giving “NaN”.`),et=f(),I=r("pre"),tt=f(),ee=r("p"),sa=i("From the spec, the + operator will try to convert left and right to a primitive (generally a string, or number), then try add the two if they conform to string or number. If both types are string, then string concatenation will occur. If both types are numbers, then numeric addition will occur."),at=f(),te=r("h3"),na=i("Extras"),lt=f(),ae=r("p"),ua=i("Just some extra gotchas:"),ot=f(),b=r("p"),Ee=r("code"),fa=i("1 < 2 < 3"),ca=i(" returns "),be=r("code"),pa=i("true"),da=i(" - which is okay, but what’s really happening?"),rt=f(),J=r("pre"),it=f(),v=r("p"),_e=r("code"),Na=i("3 > 2 > 1"),va=i(" gives "),ye=r("code"),ha=i("false"),wa=i(" following the same thinking above, even though mathematically we know this should be "),je=r("code"),ma=i("true"),Ea=i(":"),st=f(),F=r("pre"),nt=f(),le=r("h3"),ba=i("References"),ut=f(),N=r("ul"),ge=r("li"),W=r("a"),_a=i("ECMAScript spec"),ya=f(),Te=r("li"),_=r("a"),ja=i("Chidume Nnamdi’s blog post on why "),Oe=r("code"),ga=i("{} + {}"),Ta=i(" returns [object Object]"),Oa=f(),qe=r("li"),B=r("a"),qa=i("StackOverflow’s explanation on the video"),Pa=f(),Pe=r("li"),K=r("a"),Ca=i("Wat video"),ka=f(),z=r("li"),Da=i("Kyle Simpson’s "),U=r("a"),La=i("Deep JavaScript Foundations"),Ha=i(" course on FrontEnd Masters"),this.h()},l(e){h=s(e,"P",{});var l=n(h);mt=u(l,"For software engineers, you’ve most likely come across the popular "),P=s(l,"A",{href:!0,rel:!0});var Aa=n(P);Et=u(Aa,"wat video"),Aa.forEach(t),bt=u(l,", which highlights some interesting behaviour of JavaScript (JS part starts at 1:24 - 4:00)."),l.forEach(t),ke=c(e),G=s(e,"P",{});var Ma=n(G);_t=u(Ma,`I used to laugh at this and at the nonsense of it (the batman joke was gold), but wouldn’t it be good to
demystify what’s really going on and why do we have such behaviour?`),Ma.forEach(t),De=c(e),Q=s(e,"H3",{});var Ra=n(Q);yt=u(Ra,"Adding 2 empty arrays together:"),Ra.forEach(t),Le=c(e),y=s(e,"P",{});var ft=n(y);jt=u(ft,"The addition operator "),re=s(ft,"CODE",{});var Ia=n(re);gt=u(Ia,"+"),Ia.forEach(t),Tt=u(ft," will aim to either perform string concatentation OR numeric addition."),ft.forEach(t),He=c(e),C=s(e,"PRE",{class:!0});var Sl=n(C);Sl.forEach(t),Se=c(e),V=s(e,"P",{});var Ja=n(V);Ot=u(Ja,"The two empty arrays will try to be converted to a primitive data type, which get converted to string, which evaluates to an empty string, thus concatenating 2 empty strings, gives an empty string."),Ja.forEach(t),xe=c(e),k=s(e,"PRE",{class:!0});var xl=n(k);xl.forEach(t),Ae=c(e),D=s(e,"H3",{});var Sa=n(D);qt=u(Sa,"Adding "),ie=s(Sa,"CODE",{});var Fa=n(ie);Pt=u(Fa,"[] + {} = [object Object]"),Fa.forEach(t),Sa.forEach(t),Me=c(e),j=s(e,"P",{});var ct=n(j);Ct=u(ct,"This returns "),se=s(ct,"CODE",{});var Wa=n(se);kt=u(Wa,"[object Object]"),Wa.forEach(t),Dt=u(ct,". Strangely enough, we generally see this output when an object is being converted into a primitive data type into a string."),ct.forEach(t),Re=c(e),L=s(e,"PRE",{class:!0});var Al=n(L);Al.forEach(t),Ie=c(e),X=s(e,"P",{});var Ba=n(X);Lt=u(Ba,"Thus, when adding the two together:"),Ba.forEach(t),Je=c(e),H=s(e,"PRE",{class:!0});var Ml=n(H);Ml.forEach(t),Fe=c(e),g=s(e,"H3",{});var pt=n(g);Ht=u(pt,"What about "),ne=s(pt,"CODE",{});var Ka=n(ne);St=u(Ka,"{} + [] = 0"),Ka.forEach(t),xt=u(pt,"?"),pt.forEach(t),We=c(e),S=s(e,"PRE",{class:!0});var Rl=n(S);Rl.forEach(t),Be=c(e),w=s(e,"P",{});var oe=n(w);At=u(oe,"This one is a strange one, but JS is interpreting the front "),ue=s(oe,"CODE",{});var za=n(ue);Mt=u(za,"{}"),za.forEach(t),Rt=u(oe,` as a empty block rather than an object.
With the empty block evaluated, this means it just leaves `),fe=s(oe,"CODE",{});var Ua=n(fe);It=u(Ua,"+ []"),Ua.forEach(t),Jt=u(oe,", which gets converted to a primitive which is a string , then a number, giving us 0"),oe.forEach(t),Ke=c(e),x=s(e,"PRE",{class:!0});var Il=n(x);Il.forEach(t),ze=c(e),Y=s(e,"H3",{});var Za=n(Y);ce=s(Za,"CODE",{});var Ga=n(ce);Ft=u(Ga,"{} + {} = NaN"),Ga.forEach(t),Za.forEach(t),Ue=c(e),d=s(e,"P",{});var m=n(d);Wt=u(m,"The first "),pe=s(m,"CODE",{});var Qa=n(pe);Bt=u(Qa,"{}"),Qa.forEach(t),Kt=u(m," is just evaluated as an empty block, and thus ignored. Which leaves us with "),de=s(m,"CODE",{});var Va=n(de);zt=u(Va,"+ {}"),Va.forEach(t),Ut=u(m,". Once again, the object gets converted to a primitive, which is a string, giving us "),Ne=s(m,"CODE",{});var Xa=n(Ne);Zt=u(Xa,"+ '[object Object]'"),Xa.forEach(t),Gt=u(m,". Next, when we try to convert this to a number, it will return "),ve=s(m,"CODE",{});var Ya=n(ve);Qt=u(Ya,"NaN"),Ya.forEach(t),Vt=u(m,"."),m.forEach(t),Ze=c(e),A=s(e,"PRE",{class:!0});var Jl=n(A);Jl.forEach(t),Ge=c(e),T=s(e,"H3",{});var dt=n(T);Xt=u(dt,"The Batman "),he=s(dt,"CODE",{});var $a=n(he);Yt=u($a,"NaN"),$a.forEach(t),$t=u(dt," explanation"),dt.forEach(t),Qe=c(e),M=s(e,"PRE",{class:!0});var Fl=n(M);Fl.forEach(t),Ve=c(e),O=s(e,"P",{});var Nt=n(O);ea=u(Nt,"returns a string of "),we=s(Nt,"CODE",{});var el=n(we);ta=u(el,"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN"),el.forEach(t),aa=u(Nt,"."),Nt.forEach(t),Xe=c(e),q=s(e,"P",{});var vt=n(q);la=u(vt,"Let’s dissect the "),me=s(vt,"CODE",{});var tl=n(me);oa=u(tl,'"wat" - 1'),tl.forEach(t),ra=u(vt," part:"),vt.forEach(t),Ye=c(e),R=s(e,"PRE",{class:!0});var Wl=n(R);Wl.forEach(t),$e=c(e),$=s(e,"P",{});var al=n($);ia=u(al,`This will evaluate to NaN as trying to convert “wat” into a number will return NaN. Thus, adding numbers to NaN will still result in NaN.
The join operator will try convert this to a string, thus giving “NaN”.`),al.forEach(t),et=c(e),I=s(e,"PRE",{class:!0});var Bl=n(I);Bl.forEach(t),tt=c(e),ee=s(e,"P",{});var ll=n(ee);sa=u(ll,"From the spec, the + operator will try to convert left and right to a primitive (generally a string, or number), then try add the two if they conform to string or number. If both types are string, then string concatenation will occur. If both types are numbers, then numeric addition will occur."),ll.forEach(t),at=c(e),te=s(e,"H3",{});var ol=n(te);na=u(ol,"Extras"),ol.forEach(t),lt=c(e),ae=s(e,"P",{});var rl=n(ae);ua=u(rl,"Just some extra gotchas:"),rl.forEach(t),ot=c(e),b=s(e,"P",{});var Ce=n(b);Ee=s(Ce,"CODE",{});var il=n(Ee);fa=u(il,"1 < 2 < 3"),il.forEach(t),ca=u(Ce," returns "),be=s(Ce,"CODE",{});var sl=n(be);pa=u(sl,"true"),sl.forEach(t),da=u(Ce," - which is okay, but what’s really happening?"),Ce.forEach(t),rt=c(e),J=s(e,"PRE",{class:!0});var Kl=n(J);Kl.forEach(t),it=c(e),v=s(e,"P",{});var Z=n(v);_e=s(Z,"CODE",{});var nl=n(_e);Na=u(nl,"3 > 2 > 1"),nl.forEach(t),va=u(Z," gives "),ye=s(Z,"CODE",{});var ul=n(ye);ha=u(ul,"false"),ul.forEach(t),wa=u(Z," following the same thinking above, even though mathematically we know this should be "),je=s(Z,"CODE",{});var fl=n(je);ma=u(fl,"true"),fl.forEach(t),Ea=u(Z,":"),Z.forEach(t),st=c(e),F=s(e,"PRE",{class:!0});var zl=n(F);zl.forEach(t),nt=c(e),le=s(e,"H3",{});var cl=n(le);ba=u(cl,"References"),cl.forEach(t),ut=c(e),N=s(e,"UL",{});var E=n(N);ge=s(E,"LI",{});var pl=n(ge);W=s(pl,"A",{href:!0,rel:!0});var dl=n(W);_a=u(dl,"ECMAScript spec"),dl.forEach(t),pl.forEach(t),ya=c(E),Te=s(E,"LI",{});var Nl=n(Te);_=s(Nl,"A",{href:!0,rel:!0});var ht=n(_);ja=u(ht,"Chidume Nnamdi’s blog post on why "),Oe=s(ht,"CODE",{});var vl=n(Oe);ga=u(vl,"{} + {}"),vl.forEach(t),Ta=u(ht," returns [object Object]"),ht.forEach(t),Nl.forEach(t),Oa=c(E),qe=s(E,"LI",{});var hl=n(qe);B=s(hl,"A",{href:!0,rel:!0});var wl=n(B);qa=u(wl,"StackOverflow’s explanation on the video"),wl.forEach(t),hl.forEach(t),Pa=c(E),Pe=s(E,"LI",{});var ml=n(Pe);K=s(ml,"A",{href:!0,rel:!0});var El=n(K);Ca=u(El,"Wat video"),El.forEach(t),ml.forEach(t),ka=c(E),z=s(E,"LI",{});var wt=n(z);Da=u(wt,"Kyle Simpson’s "),U=s(wt,"A",{href:!0,rel:!0});var bl=n(U);La=u(bl,"Deep JavaScript Foundations"),bl.forEach(t),Ha=u(wt," course on FrontEnd Masters"),wt.forEach(t),E.forEach(t),this.h()},h(){p(P,"href","https://www.destroyallsoftware.com/talks/wat"),p(P,"rel","nofollow"),p(C,"class","language-undefined"),p(k,"class","language-undefined"),p(L,"class","language-undefined"),p(H,"class","language-undefined"),p(S,"class","language-undefined"),p(x,"class","language-undefined"),p(A,"class","language-undefined"),p(M,"class","language-undefined"),p(R,"class","language-undefined"),p(I,"class","language-undefined"),p(J,"class","language-undefined"),p(F,"class","language-undefined"),p(W,"href","https://tc39.es/ecma262/#sec-addition-operator-plus"),p(W,"rel","nofollow"),p(_,"href","https://medium.com/dev-proto/why-gives-object-object-object-object-in-javascript-2f350b739cc9"),p(_,"rel","nofollow"),p(B,"href","https://stackoverflow.com/questions/9032856/what-is-the-explanation-for-these-bizarre-javascript-behaviours-mentioned-in-the"),p(B,"rel","nofollow"),p(K,"href","https://www.destroyallsoftware.com/talks/wat"),p(K,"rel","nofollow"),p(U,"href","https://frontendmasters.com/courses/deep-javascript-v3/"),p(U,"rel","nofollow")},m(e,l){o(e,h,l),a(h,mt),a(h,P),a(P,Et),a(h,bt),o(e,ke,l),o(e,G,l),a(G,_t),o(e,De,l),o(e,Q,l),a(Q,yt),o(e,Le,l),o(e,y,l),a(y,jt),a(y,re),a(re,gt),a(y,Tt),o(e,He,l),o(e,C,l),C.innerHTML=yl,o(e,Se,l),o(e,V,l),a(V,Ot),o(e,xe,l),o(e,k,l),k.innerHTML=jl,o(e,Ae,l),o(e,D,l),a(D,qt),a(D,ie),a(ie,Pt),o(e,Me,l),o(e,j,l),a(j,Ct),a(j,se),a(se,kt),a(j,Dt),o(e,Re,l),o(e,L,l),L.innerHTML=gl,o(e,Ie,l),o(e,X,l),a(X,Lt),o(e,Je,l),o(e,H,l),H.innerHTML=Tl,o(e,Fe,l),o(e,g,l),a(g,Ht),a(g,ne),a(ne,St),a(g,xt),o(e,We,l),o(e,S,l),S.innerHTML=Ol,o(e,Be,l),o(e,w,l),a(w,At),a(w,ue),a(ue,Mt),a(w,Rt),a(w,fe),a(fe,It),a(w,Jt),o(e,Ke,l),o(e,x,l),x.innerHTML=ql,o(e,ze,l),o(e,Y,l),a(Y,ce),a(ce,Ft),o(e,Ue,l),o(e,d,l),a(d,Wt),a(d,pe),a(pe,Bt),a(d,Kt),a(d,de),a(de,zt),a(d,Ut),a(d,Ne),a(Ne,Zt),a(d,Gt),a(d,ve),a(ve,Qt),a(d,Vt),o(e,Ze,l),o(e,A,l),A.innerHTML=Pl,o(e,Ge,l),o(e,T,l),a(T,Xt),a(T,he),a(he,Yt),a(T,$t),o(e,Qe,l),o(e,M,l),M.innerHTML=Cl,o(e,Ve,l),o(e,O,l),a(O,ea),a(O,we),a(we,ta),a(O,aa),o(e,Xe,l),o(e,q,l),a(q,la),a(q,me),a(me,oa),a(q,ra),o(e,Ye,l),o(e,R,l),R.innerHTML=kl,o(e,$e,l),o(e,$,l),a($,ia),o(e,et,l),o(e,I,l),I.innerHTML=Dl,o(e,tt,l),o(e,ee,l),a(ee,sa),o(e,at,l),o(e,te,l),a(te,na),o(e,lt,l),o(e,ae,l),a(ae,ua),o(e,ot,l),o(e,b,l),a(b,Ee),a(Ee,fa),a(b,ca),a(b,be),a(be,pa),a(b,da),o(e,rt,l),o(e,J,l),J.innerHTML=Ll,o(e,it,l),o(e,v,l),a(v,_e),a(_e,Na),a(v,va),a(v,ye),a(ye,ha),a(v,wa),a(v,je),a(je,ma),a(v,Ea),o(e,st,l),o(e,F,l),F.innerHTML=Hl,o(e,nt,l),o(e,le,l),a(le,ba),o(e,ut,l),o(e,N,l),a(N,ge),a(ge,W),a(W,_a),a(N,ya),a(N,Te),a(Te,_),a(_,ja),a(_,Oe),a(Oe,ga),a(_,Ta),a(N,Oa),a(N,qe),a(qe,B),a(B,qa),a(N,Pa),a(N,Pe),a(Pe,K),a(K,Ca),a(N,ka),a(N,z),a(z,Da),a(z,U),a(U,La),a(z,Ha)},p:xa,i:xa,o:xa,d(e){e&&t(h),e&&t(ke),e&&t(G),e&&t(De),e&&t(Q),e&&t(Le),e&&t(y),e&&t(He),e&&t(C),e&&t(Se),e&&t(V),e&&t(xe),e&&t(k),e&&t(Ae),e&&t(D),e&&t(Me),e&&t(j),e&&t(Re),e&&t(L),e&&t(Ie),e&&t(X),e&&t(Je),e&&t(H),e&&t(Fe),e&&t(g),e&&t(We),e&&t(S),e&&t(Be),e&&t(w),e&&t(Ke),e&&t(x),e&&t(ze),e&&t(Y),e&&t(Ue),e&&t(d),e&&t(Ze),e&&t(A),e&&t(Ge),e&&t(T),e&&t(Qe),e&&t(M),e&&t(Ve),e&&t(O),e&&t(Xe),e&&t(q),e&&t(Ye),e&&t(R),e&&t($e),e&&t($),e&&t(et),e&&t(I),e&&t(tt),e&&t(ee),e&&t(at),e&&t(te),e&&t(lt),e&&t(ae),e&&t(ot),e&&t(b),e&&t(rt),e&&t(J),e&&t(it),e&&t(v),e&&t(st),e&&t(F),e&&t(nt),e&&t(le),e&&t(ut),e&&t(N)}}}const Xl={title:"i still don't know js: demystifying the 2012 wat video",date:"2024-07-28T18:00:08.000Z"};class Yl extends Ul{constructor(h){super(),Zl(this,h,null,Ql,Gl,{})}}export{Yl as default,Xl as metadata};
